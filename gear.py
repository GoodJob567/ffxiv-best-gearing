#!/usr/bin/python
# -*- coding: UTF-8 -*-

from math import floor

items = [
    [
        {'INT': 90, 'CRT': 0, 'DET': 61, 'DHT': 0, 'SPS': 87, 'limit': 87},
        {'INT': 90, 'CRT': 61, 'DET': 0, 'DHT': 87, 'SPS': 0, 'limit': 87},
        {'INT': 90, 'CRT': 87, 'DET': 0, 'DHT': 61, 'SPS': 0, 'limit': 87}
    ],
    [
        {'INT': 142, 'CRT': 0, 'DET': 139, 'DHT': 97, 'SPS': 0, 'limit': 139},
        {'INT': 142, 'CRT': 139, 'DET': 97, 'DHT': 0, 'SPS': 0, 'limit': 139},
        {'INT': 142, 'CRT': 97, 'DET': 0, 'DHT': 139, 'SPS': 0, 'limit': 139}
    ],
    [
        {'INT': 90, 'CRT': 0, 'DET': 61, 'DHT': 0, 'SPS': 87, 'limit': 87},
        {'INT': 90, 'CRT': 0, 'DET': 0, 'DHT': 87, 'SPS': 61, 'limit': 87},
        {'INT': 90, 'CRT': 0, 'DET': 61, 'DHT': 87, 'SPS': 0, 'limit': 87}
    ],
    [
        {'INT': 142, 'CRT': 97, 'DET': 0, 'DHT': 139, 'SPS': 0, 'limit': 139},
        {'INT': 142, 'CRT': 0, 'DET': 139, 'DHT': 97, 'SPS': 0, 'limit': 139},
        {'INT': 142, 'CRT': 139, 'DET': 97, 'DHT': 0, 'SPS': 0, 'limit': 139}
    ],
    [
        {'INT': 90, 'CRT': 87, 'DET': 61, 'DHT': 0, 'SPS': 0, 'limit': 87},
        {'INT': 90, 'CRT': 87, 'DET': 0, 'DHT': 0, 'SPS': 61, 'limit': 87},
        {'INT': 90, 'CRT': 61, 'DET': 0, 'DHT': 0, 'SPS': 87, 'limit': 87}
    ],
    [
        {'INT': 71, 'CRT': 0, 'DET': 69, 'DHT': 0, 'SPS': 48, 'limit': 69},
        {'INT': 71, 'CRT': 69, 'DET': 48, 'DHT': 0, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 69, 'DET': 48, 'DHT': 0, 'SPS': 0, 'limit': 69}
    ],
    [
        {'INT': 71, 'CRT': 69, 'DET': 0, 'DHT': 48, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 0, 'DET': 0, 'DHT': 69, 'SPS': 48, 'limit': 69},
        {'INT': 71, 'CRT': 0, 'DET': 69, 'DHT': 0, 'SPS': 48, 'limit': 69}
    ],
    [
        {'INT': 71, 'CRT': 0, 'DET': 0, 'DHT': 48, 'SPS': 69, 'limit': 69},
        {'INT': 71, 'CRT': 0, 'DET': 69, 'DHT': 48, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 69, 'DET': 0, 'DHT': 48, 'SPS': 0, 'limit': 69}
    ],
    [
        {'INT': 71, 'CRT': 48, 'DET': 69, 'DHT': 0, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 69, 'DET': 0, 'DHT': 48, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 48, 'DET': 0, 'DHT': 69, 'SPS': 0, 'limit': 69}
    ],
    [
        {'INT': 71, 'CRT': 48, 'DET': 69, 'DHT': 0, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 69, 'DET': 0, 'DHT': 48, 'SPS': 0, 'limit': 69},
        {'INT': 71, 'CRT': 48, 'DET': 0, 'DHT': 69, 'SPS': 0, 'limit': 69}
    ]
]

foods = [
    {'CRT': 0, 'DET': 54, 'DHT': 90, 'SPS': 0},
    {'CRT': 54, 'DET': 90, 'DHT': 0, 'SPS': 0},
    {'CRT': 0, 'DET': 0, 'DHT': 54, 'SPS': 90},
    {'CRT': 90, 'DET': 0, 'DHT': 0, 'SPS': 54}
]

jobLevel = 70
job = 'BLU'
baseStats = {'CRT': 364, 'DET': 292, 'DHT': 364, 'INT': 335, 'MDMG': 0, 'PDMG': 0, 'SPS': 364, 'VIT': 291}

bluMdmgAdditions = [
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    13,
    14,
    15,
    16,
    18,
    20,
    20,
    21,
    22,
    23,
    24,
    26,
    27,
    27,
    28,
    29,
    29,
    30,
    30,
    31,
    31,
    32,
    32,
    33,
    33,
    34,
    34,
    35,
    35,
    36,
    36,
    37,
    37,
    37,
    37,
    38,
    38,
    39,
    39,
    39,
    40,
    40,
    40,
    41,
    41,
    42,
    42,
    42,
    43,
    43,
    43,
    44,
    44,
    45,
    46,
    46,
    47,
    48,
    49,
    49,
    50,
    50,
    51,
    51,
    52,
    53,
    53,
    54,
    54,
    55,
    56,
    56,
    57,
    57,
    57,
    57,
    57,
    58,
    58,
    58,
    58,
    58,
    58,
    58,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    59,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    61,
    61,
    61,
    61,
    61,
    61,
    61,
    61,
    61,
    61,
    62,
    62,
    62,
    62,
    62,
    62,
    62,
    62,
    62,
    62,
    63,
    63,
    63,
    63,
    63,
    63,
    63,
    63,
    63,
    63,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    65,
    65,
    65,
    65,
    65,
    65,
    65,
    65,
    65,
    65,
    66,
    66,
    66,
    66,
    66,
    66,
    66,
    66,
    66,
    66,
    67,
    67,
    67,
    67,
    67,
    67,
    67,
    67,
    67,
    67,
    68,
    68,
    68,
    68,
    68,
    68,
    68,
    68,
    68,
    68,
    69,
    69,
    69,
    69,
    69,
    69,
    69,
    69,
    69,
    69,
    70,
    70,
    70,
    70,
    70,
    70,
    70,
    70,
    70,
    70,
    71,
    71,
    71,
    71,
    71,
    71,
    71,
    71,
    71,
    71,
    72,
    72,
    72,
    72,
    72,
    72,
    72,
    72,
    72,
    72,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    74,
    74,
    74,
    74,
    74,
    74,
    74,
    74,
    74,
    74,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    76,
    76,
    76,
    76,
    76,
    76,
    76,
    76,
    76,
    76,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    77,
    78,
    78,
    78,
    78,
    78,
    78,
    78,
    78,
    78,
    78,
    79,
    79,
    79,
    79,
    79,
    79,
    79,
    79,
    79,
    79,
    80,
    80,
    80,
    80,
    80,
    80,
    80,
    80,
    80,
    80,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    81,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    84,
    85,
    85,
    85,
    85,
    85,
    85,
    85,
    85,
    85,
    85,
    86,
    86,
    86,
    86,
    86,
    86,
    86,
    86,
    86,
    86,
    88,
    88,
    88,
    88,
    88,
    88,
    88,
    88,
    88,
    88,
    90,
    90,
    90,
    90,
    90,
    90,
    90,
    90,
    90,
    90,
    92,
    92,
    92,
    92,
    92,
    92,
    92,
    92,
    92,
    92,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    95,
    95,
    95,
    95,
    95,
    95,
    95,
    95,
    95,
    95,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    97,
    98,
    98,
    98,
    98,
    98,
    98,
    98,
    98,
    98,
    98,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    101,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    102,
    103,
    103,
    103,
    103,
    103,
    103,
    103,
    103,
    103,
    103,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    104,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    105,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    106,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    107,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    108,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    110,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    111,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    112,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    114,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    115,
    116,
    116,
    116,
    116,
    116,
    116,
    116,
    116,
    116,
    116,
    117,
    117,
    117,
    117,
    117,
    117,
    117,
    117,
    117,
    117,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    119,
    119,
    119,
    119,
    119,
    119,
    119,
    119,
    119,
    119,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    120,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    122,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    123,
    124,
    124,
    124,
    124,
    124,
    124,
    124,
    124,
    124,
    124,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    125,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    126,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    129,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    130,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    131,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    133,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    134,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    137,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    138,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    139,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    140,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    141,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    142,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    143,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    144,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    145,
    146,
    146,
    146,
];

jobLevelModifiers = {
    50: {
        'main': 202, 'sub': 341, 'div': 341, 'det': 202, 'detTrunc': 5,
        'ap': 75, 'apTank': 53, 'hp': 1700, 'vit': 10.2, 'vitTank': 14.5,
    },
    60: {
        'main': 218, 'sub': 354, 'div': 600, 'det': 600, 'detTrunc': 2,
        'ap': 100, 'apTank': 78, 'hp': 2600, 'vit': 15.4, 'vitTank': 20.5,
    },
    70: {
        'main': 292, 'sub': 364, 'div': 900, 'det': 900, 'detTrunc': 1,
        'ap': 125, 'apTank': 105, 'hp': 3600, 'vit': 15.9, 'vitTank': 21.5,
    },
    80: {
        'main': 340, 'sub': 380, 'div': 1300, 'det': 1300, 'detTrunc': 1,
        'ap': 165, 'apTank': 115, 'hp': 4400, 'vit': 22.1, 'vitTank': 31.5,
    },
    90: {
        'main': 390, 'sub': 400, 'div': 1900, 'det': 1900, 'detTrunc': 1,
        'ap': 195, 'apTank': 155, 'hp': 4400, 'vit': 22.1, 'vitTank': 31.5,
    },
}

jobSchemas = {
    'PLD': {
        'statModifiers': {'STR': 100, 'VIT': 110, 'hp': 120},
        'mainStat': 'VIT',
        'traitDamageMultiplier': 1,
    },
    'WAR': {
        'statModifiers': {'STR': 105, 'VIT': 110, 'hp': 125},
        'mainStat': 'VIT',
        'traitDamageMultiplier': 1,
    },
    'DRK': {
        'statModifiers': {'STR': 105, 'VIT': 110, 'hp': 120},
        'mainStat': 'VIT',
        'traitDamageMultiplier': 1,
    },
    'GNB': {
        'statModifiers': {'STR': 100, 'VIT': 110, 'hp': 120},
        'mainStat': 'VIT',
        'traitDamageMultiplier': 1,
    },
    'WHM': {
        'statModifiers': {'MND': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'MND',
        'traitDamageMultiplier': 1.3,
    },
    'SCH': {
        'statModifiers': {'MND': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'MND',
        'traitDamageMultiplier': 1.3,
    },
    'AST': {
        'statModifiers': {'MND': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'MND',
        'traitDamageMultiplier': 1.3,
    },
    'SGE': {
        'statModifiers': {'MND': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'MND',
        'traitDamageMultiplier': 1.3,
    },
    'MNK': {
        'statModifiers': {'STR': 110, 'VIT': 100, 'hp': 110, 'gcd': 80, 'gcdReason': '“疾风迅雷”状态中'},
        'mainStat': 'STR',
        'traitDamageMultiplier': 1,
    },
    'DRG': {
        'statModifiers': {'STR': 115, 'VIT': 105, 'hp': 115},
        'mainStat': 'STR',
        'traitDamageMultiplier': 1,
    },
    'NIN': {
        'statModifiers': {'DEX': 110, 'VIT': 100, 'hp': 108, 'gcd': 85, 'gcdReason': '“风遁”状态中'},
        'mainStat': 'DEX',
        'traitDamageMultiplier': 1,
    },
    'SAM': {
        'statModifiers': {'STR': 112, 'VIT': 100, 'hp': 109, 'gcd': 87, 'gcdReason': '“风花”状态中'},
        'mainStat': 'STR',
        'traitDamageMultiplier': 1,
    },
    'RPR': {
        'statModifiers': {'STR': 115, 'VIT': 105, 'hp': 115},
        'mainStat': 'STR',
        'traitDamageMultiplier': 1,
    },
    'BRD': {
        'statModifiers': {'DEX': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'DEX',
        'traitDamageMultiplier': 1.2,
    },
    'MCH': {
        'statModifiers': {'DEX': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'DEX',
        'traitDamageMultiplier': 1.2,
    },
    'DNC': {
        'statModifiers': {'DEX': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'DEX',
        'traitDamageMultiplier': 1.2,
    },
    'BLM': {
        'statModifiers': {'INT': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'INT',
        'traitDamageMultiplier': 1.3,
    },
    'SMN': {
        'statModifiers': {'INT': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'INT',
        'traitDamageMultiplier': 1.3,
    },
    'RDM': {
        'statModifiers': {'INT': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'INT',
        'traitDamageMultiplier': 1.3,
    },
    'BLU': {
        'statModifiers': {'INT': 115, 'VIT': 100, 'hp': 105},
        'mainStat': 'INT',
        'traitDamageMultiplier': 1.5,
    }
}

attDict = ['CRT', 'DET', 'DHT', 'SPS']
resdamage = 0
resgcd = 3
avg_dmg = 0
res = [[0] for i in range(15)]
statModifiers = jobSchemas[job]['statModifiers']
mainStat = jobSchemas[job]['mainStat']
attackMainStat = mainStat
mainModifier = statModifiers[attackMainStat]
tenDamage = 0
bluAetherialMimicry = 0
partyBonus = 1.05
levelMod = jobLevelModifiers[jobLevel]
main = levelMod['main']
sub = levelMod['sub']
div = levelMod['div']
det = levelMod['det']
detTrunc = levelMod['detTrunc']


def get_Stats(itemArr, stoneArr):
    equippedStats = {'INT': 335, 'CRT': 364, 'DET': 292, 'DHT': 364, 'TEN': 0, 'SKS': 0, 'SPS': 364, 'PDMG': 0,
                     'MDMG': 1}
    equippedStats['INT'] = baseStats['INT'] + items[0][itemArr[0]]['INT'] + items[1][itemArr[1]]['INT'] + \
                           items[2][itemArr[2]]['INT'] + items[3][itemArr[3]]['INT'] + items[4][itemArr[4]]['INT'] + \
                           items[5][itemArr[5]]['INT'] + items[6][itemArr[6]]['INT'] + items[7][itemArr[7]]['INT'] + \
                           items[8][itemArr[8]]['INT'] + items[9][itemArr[9]]['INT']

    equippedStats['CRT'] = baseStats['CRT']
    limit = 0
    limit2 = 0
    for i in range(10):
        equippedStats['CRT'] += items[i][itemArr[i]]['CRT']
        if items[i][itemArr[i]]['CRT'] == items[i][itemArr[i]]['limit']:
            if i < 5:
                limit += 2
            else:
                limit += 1
    if limit + stoneArr[0] > 17: return False
    if items[0][itemArr[0]]['CRT'] != 0 and items[0][itemArr[0]]['CRT'] != items[0][itemArr[0]]['limit']: limit2 += 1
    if items[2][itemArr[2]]['CRT'] != 0 and items[2][itemArr[2]]['CRT'] != items[2][itemArr[2]]['limit']: limit2 += 1
    if items[4][itemArr[4]]['CRT'] != 0 and items[4][itemArr[4]]['CRT'] != items[4][itemArr[4]]['limit']: limit2 += 1
    if limit + limit2 + stoneArr[0] >= 17: equippedStats['CRT'] -= limit2 * 6
    equippedStats['CRT'] += stoneArr[0] * 16

    equippedStats['DET'] = baseStats['DET']
    limit = 0
    limit2 = 0
    for i in range(10):
        equippedStats['DET'] += items[i][itemArr[i]]['DET']
        if items[i][itemArr[i]]['DET'] == items[i][itemArr[i]]['limit']:
            if i < 5:
                limit += 2
            else:
                limit += 1
    if limit + stoneArr[1] > 17: return False
    if items[0][itemArr[0]]['DET'] != 0 and items[0][itemArr[0]]['DET'] != items[0][itemArr[0]]['limit']: limit2 += 1
    if items[2][itemArr[2]]['DET'] != 0 and items[2][itemArr[2]]['DET'] != items[2][itemArr[2]]['limit']: limit2 += 1
    if items[4][itemArr[4]]['DET'] != 0 and items[4][itemArr[4]]['DET'] != items[4][itemArr[4]]['limit']: limit2 += 1
    if limit + limit2 + stoneArr[1] >= 17: equippedStats['DET'] -= limit2 * 6
    equippedStats['DET'] += stoneArr[1] * 16

    equippedStats['DHT'] = baseStats['DHT']
    limit = 0
    limit2 = 0
    for i in range(10):
        equippedStats['DHT'] += items[i][itemArr[i]]['DHT']
        if items[i][itemArr[i]]['DHT'] == items[i][itemArr[i]]['limit']:
            if i < 5:
                limit += 2
            else:
                limit += 1
    if limit + stoneArr[2] > 17: return False
    if items[0][itemArr[0]]['DHT'] != 0 and items[0][itemArr[0]]['DHT'] != items[0][itemArr[0]]['limit']: limit2 += 1
    if items[2][itemArr[2]]['DHT'] != 0 and items[2][itemArr[2]]['DHT'] != items[2][itemArr[2]]['limit']: limit2 += 1
    if items[4][itemArr[4]]['DHT'] != 0 and items[4][itemArr[4]]['DHT'] != items[4][itemArr[4]]['limit']: limit2 += 1
    if limit + limit2 + stoneArr[2] >= 17: equippedStats['DHT'] -= limit2 * 6
    equippedStats['DHT'] += stoneArr[2] * 16

    equippedStats['SPS'] = baseStats['SPS']
    limit = 0
    limit2 = 0
    for i in range(10):
        equippedStats['SPS'] += items[i][itemArr[i]]['SPS']
        if items[i][itemArr[i]]['SPS'] == items[i][itemArr[i]]['limit']:
            if i < 5:
                limit += 2
            else:
                limit += 1
    if limit + stoneArr[3] > 17: return False
    if items[0][itemArr[0]]['SPS'] != 0 and items[0][itemArr[0]]['SPS'] != items[0][itemArr[0]]['limit']: limit2 += 1
    if items[2][itemArr[2]]['SPS'] != 0 and items[2][itemArr[2]]['SPS'] != items[2][itemArr[2]]['limit']: limit2 += 1
    if items[4][itemArr[4]]['SPS'] != 0 and items[4][itemArr[4]]['SPS'] != items[4][itemArr[4]]['limit']: limit2 += 1
    if limit + limit2 + stoneArr[3] >= 17: equippedStats['SPS'] -= limit2 * 6
    equippedStats['SPS'] += stoneArr[3] * 16

    if foods[itemArr[10]]['CRT'] != 0:
        tmp = floor(equippedStats['CRT'] / 10)
        if foods[itemArr[10]]['CRT'] > tmp:
            equippedStats['CRT'] += tmp
        else:
            equippedStats['CRT'] += foods[itemArr[10]]['CRT']

    if foods[itemArr[10]]['DET'] != 0:
        tmp = floor(equippedStats['DET'] / 10)
        if foods[itemArr[10]]['DET'] > tmp:
            equippedStats['DET'] += tmp
        else:
            equippedStats['DET'] += foods[itemArr[10]]['DET']

    if foods[itemArr[10]]['DHT'] != 0:
        tmp = floor(equippedStats['DHT'] / 10)
        if foods[itemArr[10]]['DHT'] > tmp:
            equippedStats['DHT'] += tmp
        else:
            equippedStats['DHT'] += foods[itemArr[10]]['DHT']

    if foods[itemArr[10]]['SPS'] != 0:
        tmp = floor(equippedStats['SPS'] / 10)
        if foods[itemArr[10]]['SPS'] > tmp:
            equippedStats['SPS'] += tmp
        else:
            equippedStats['SPS'] += foods[itemArr[10]]['SPS']

    return equippedStats


def calc(equippedStats, Arr):
    global resdamage, resgcd, avg_dmg, mainModifier, attackMainStat
    INT = equippedStats['INT']
    CRT = equippedStats['CRT']
    DET = equippedStats['DET']
    DHT = equippedStats['DHT']
    TEN = equippedStats['TEN']
    SKS = equippedStats['SKS']
    SPS = equippedStats['SPS']
    PDMG = equippedStats['PDMG']
    MDMG = equippedStats['MDMG']
    weaponDamage = 0
    if (job == 'BLU'):
        weaponDamage += bluMdmgAdditions[INT - baseStats['INT']]
        bluAetherialMimicry = 200
        partyBonus = 1.01
    if (mainStat == 'MND' or mainStat == 'INT'):
        weaponDamage += MDMG
    else:
        weaponDamage += PDMG
    if (mainStat == 'VIT'):
        attackMainStat = 'STR'
        mainModifier = floor((statModifiers.VIT + statModifiers.STR) / 2)
        mainDamage = floor(
            levelMod['apTank'] * (floor((equippedStats[attackMainStat] or 0) * partyBonus) - main) / main + 100) / 100
    weaponDamage += floor(main * mainModifier / 1000)
    mainDamage = floor(
        levelMod['ap'] * (floor((equippedStats[attackMainStat] or 0) * partyBonus) - main) / main + 100) / 100
    detDamage = floor((140 * (DET - main) / det + 1000) / detTrunc) * detTrunc / 1000
    if (TEN == 0):
        tenDamage = floor(100 * (sub - sub) / div + 1000) / 1000
    else:
        tenDamage = floor(100 * (TEN - sub) / div + 1000) / 1000
    crtDamage = floor(200 * (CRT - sub) / div + 1400) / 1000
    crtChance = floor(200 * (CRT - sub) / div + 50 + bluAetherialMimicry) / 1000
    dhtChance = floor(550 * (DHT - sub) / div + bluAetherialMimicry) / 1000
    damage = 0.01 * weaponDamage * mainDamage * detDamage * tenDamage * jobSchemas[job]['traitDamageMultiplier'] * (
            (crtDamage - 1) * crtChance + 1) * (0.25 * dhtChance + 1);
    gcd = floor(floor((1000 - floor(130 * (SPS - sub) / div)) * 2500 / 1000) * 100 / 1000) / 100;
    if avg_dmg < damage / gcd:
        avg_dmg = damage / gcd
        resdamage = damage
        resgcd = gcd
        res[0] = Arr[0]
        res[1] = Arr[1]
        res[2] = Arr[2]
        res[3] = Arr[3]
        res[4] = Arr[4]
        res[5] = Arr[5]
        res[6] = Arr[6]
        res[7] = Arr[7]
        res[8] = Arr[8]
        res[9] = Arr[9]
        res[10] = Arr[10]
        res[11] = Arr[11]
        res[12] = Arr[12]
        res[13] = Arr[13]
        res[14] = Arr[14]
        print("\n\nbetter gear:")
        print('damage:' + str(damage))
        print('gcd:' + str(gcd))
        print('avg_dmg:' + str(avg_dmg))
        print('items:')
        print(res)
        print("")


if __name__ == '__main__':
    for i0 in range(3):
        for i1 in range(3):
            for i2 in range(3):
                for i3 in range(3):
                    for i4 in range(3):
                        for i5 in range(3):
                            for i6 in range(3):
                                for i7 in range(3):
                                    for i8 in range(3):
                                        for i9 in range(3):
                                            for i10 in range(4):
                                                for j0 in range(18):
                                                    for j1 in range(18):
                                                        for j2 in range(18):
                                                            j3 = 17 - j0 - j1 - j2
                                                            if j3 < 0:
                                                                break
                                                            equippedStats = get_Stats(
                                                                [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10],
                                                                [j0, j1, j2, j3])
                                                            if equippedStats: calc(equippedStats,
                                                                                   [i0, i1, i2, i3, i4, i5, i6, i7, i8,
                                                                                    i9, i10, j0, j1, j2, j3])
                                                            print("\r" + str(
                                                                [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, j0, j1,
                                                                 j2, j3]), end='')
    print("\n\ntest over!")
    print("max damage = " + str(resdamage))
    print("max gcd = " + str(resgcd))
    print("max avg_dmg = " + str(avg_dmg))
    print("items selects : ")
    print(res)
    exit()
